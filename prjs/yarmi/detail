In 2017, I started to have an interest in meta programming in Java because I recognized a number of magical tricks shown by well-designed frameworks are possible based on meta programming features in Java. so this project was initiated for learning experience of it. the first reason RMI is chosen as a project topic is that I was impressed by Retrofit, the HTTP client library, for its simple and intuitive API which delivered pleasant development experience to me at that time. that is the reason why so much of YARMI API resembles it. and the second reason is that I was also interested in distributed system for data processing and tried to build one at home at that time. so I started to think of painlessly maintained (autonomously configured) distributed system in that context. so I try to build simple proof-of-concept project combining both service discovery and RMI. it had been turned out quite appropriate choice to start RMI framework for the purpose of learning meta programming. for example, boilerplate for communication between client and server and complex meta data construction for service advertising could be simplified or removed at all using reflection API. 
